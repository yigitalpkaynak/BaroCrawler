status = warn
name= AppLog

# Log files location
property.basePath = logs
property.fileName = appLogs

# appenders = console, rolling
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{ISO8601} %5p [%t] (%F:%L) - %m%n
#appender.console.filter.threshold.type = ThresholdFilter
#appender.console.filter.threshold.level = debug

# RollingFileAppender name, pattern, path and rollover policy
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}/${fileName}.log
#appender.rolling.filePattern= ${basePath}/${fileName}.%d{yyyyMMdd.HHmm}.log.gz
appender.rolling.filePattern= ${basePath}/${fileName}-%i.log.gz
appender.rolling.layout.type = PatternLayout
# appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level %t [%c:%L] - %m%n
# appender.rolling.layout.pattern = %d{ISO8601} %p %t %c:%L - %m%n
# use old %d{ISO8601} format as shown below
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %p %t %c:%L - %m%n
appender.rolling.policies.type = Policies

# To change log file by interval based on the most specific time unit in the filePattern
# everydau for below example time unit: minute, interal:1440 min=>24*60 mins
#appender.rolling.filePattern= ${basePath}/${fileName}.%d{yyyyMMdd.HHmm}.log.gz
#appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval = 1440
#appender.rolling.policies.time.modulate = true

# RollingFileAppender rotation policy: To change log file after 100MB size 
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB

appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 10


#rootLogger = info, STDOUT
# or using a grouping element:
rootLogger.level = warn
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.file.ref = fileLogger
